import sys
import os
import streamlit as st
import pandas as pd
import time
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if project_root not in sys.path:
    sys.path.append(project_root)

#L칛gg in funktioner fr친n llm_core 
# Exempel:

try:
    from llm_core.interaction import query_text_to_sql, query_rag_model
    # from llm_core.utility import get_db_connection # Om vi beh칬ver ansluta till DB h칛r
    LLM_FUNCTIONS_IMPORTED = True
except ImportError as e:
    st.error(f"Kunde inte importera LLM-funktioner: {e}. Vissa delar kommer anv칛nda dummy-data.")
    LLM_FUNCTIONS_IMPORTED = False
    # Dummy-funktioner s친 sidan kan ritas upp.
    def query_text_to_sql(user_query_string, db_path, llm_api_key):
        time.sleep(1)
        return f"SELECT '{user_query_string}' AS SimulatedSQL;", pd.DataFrame({'Resultat': ['Ingen riktig data']})
    def query_rag_model(query_text, db_path, llm_api_key):
        time.sleep(1)
        return f"Simulerat RAG-svar f칬r: '{query_text}'", ["Simulerad kontext 1", "Simulerad kontext 2"]
    

# --- API-nyckel och Databass칬kv칛g ---

try:
    GEMINI_API_KEY = st.secrets["GEMINI_API_KEY"]
except KeyError:
    st.error("VARNING: GEMINI_API_KEY saknas i .streamlit/secret.toml.")
    GEMINI_API_KEY = None

DB_PATH = os.path.join(project_root, "ads_data.duckdb")
if not os.path.exists(DB_PATH) and LLM_FUNCTIONS_IMPORTED: # Varna bara om vi f칬rs칬ker anv칛nda riktiga funktioner
    st.error(f"Databasfilen ads_data.duckdb hittades inte p친 f칬rv칛ntad plats: {DB_PATH}.")


def build_llm_introduction_and_tools():
    st.set_page_config(page_title="LLM Dashboard", page_icon="游뱄", layout="wide")
    st.title("V칛lkommen till LLM Dashboarden")
    st.markdown("""
    H칛r kan du interagera med v친ra avancerade spr친kmodeller(LLM) f칬r att f친 insikter fr친n jobbannonsdata
    p친 nya och sp칛nnande s칛tt! Nedan hittar du en kort f칬rklaring av de verktyg som finns tillg칛ngliga
    och sedan kan du v칛lja ett verktyg via flikarna.
    """)
    st.divider()
    col1,col2 = st.columns(2)
    with col1:
        st.subheader("Text-to-SQL: Fr친ga Databasen med Vanligt Spr친k")
        st.markdown("""
        Har du en fr친ga som du tror datan i v친r strukturerade databas kan svara p친?
        Skriv din fr친ga p친 svenska, s친 kommer v친r LLM att f칬rs칬ka 칬vers칛tta den till en SQL-kod.
        SQL-koden k칬rs sedan mot databasen ('ads_data.duckdb', 'refined'-schemat) och du f친r tillbaka resultatet!
                    
        **Exempel p친 fr친gor:**
        * "Vilka Data/IT-jobb finns i g칬teborg?"
        * "Hur m친nga jobb kr칛ver B-k칬rkort?"
        * "Visa de 5 vanligaste yrkestitlarna."
        """)
    with col2:
        st.subheader(" RAG (Retrieval-Augmented Generation): Fr친ga Annonsinneh친ll")
        st.markdown("""
        Vill du veta mer om vad som faktiskt st친r i textbeskrivningarna i jobbannonserna?
        Med RAG-verktyget kan du st칛lla fr친gor om detta. Modellen letar f칬rst upp relevanta textavsnitt
        fr친n annonserna och anv칛nder sedan dessa som underlag f칬r att formulera ett svar.
        
        **Exempel p친 fr친gor:**
        * "Vilka kompetenser efterfr친gas ofta f칬r projektledare?"
        * "N칛mns det n친got om m칬jligheter till distansarbete?
        * "Vilka tekniska f칛rdigheter 칛r vanliga f칬r systemutvecklare?
        """)
    st.divider()


    # --- Flikar f칬r det faktiska verktygen ---
    tab_text_to_sql, tab_rag = st.tabs(["Prova Text-to-SQL", "Prova RAG"])

    with tab_text_to_sql:
        st.header("Verktyg: Text-to-SQL")
        with st.form("text_to_sql_form"):
            sql_query_text = st.text_area("St칛ll din fr친ga till databasen:", height=100, placeholder="Exempel: Vilka jobb finns i G칬teborg inom IT?")
            sql_submit_button = st.form_submit_button("K칬r SQL-fr친ga")

            if sql_submit_button and sql_query_text:
                if not GEMINI_API_KEY and LLM_FUNCTIONS_IMPORTED:
                    st.error("GEMINI_API_KEY saknas i .streamlit/secrets.toml. Kan inte k칬ra den riktiga modellen.")
                else:
                    with st.spinner("Bearbetar din SQL-fr친ga..."):
                        # Anropa din riktiga funktion eller dummy-funktionen
                        genreated_sql, result_df = query_text_to_sql(sql_query_text, DB_PATH, GEMINI_API_KEY)

                        st.subheader("Genererad SQL-fr친ga:")
                        st.code(genreated_sql, language="sql")
                        
                        st.subheader("Resultat:")
                        if result_df is not None and not result_df.empty:
                            st.dataframe(result_df, use_container_width=True)
                        elif result_df is not None:
                            st.info("Inga resultat hittades f칬r din fr친ga.")
                        else:
                            st.warning("Kunde inte h칛mta n친gra resultat. N친got som inte 칛r klart.")
    
    with tab_rag:
        st.header("Verktyg: RAG - Fr친ga Annonsinneh친ll")
        with st.form("rag_form"):
            rag_query_text = st.text_area ("St칛ll din fr친ga om inneh친llet i jobbannonserna: ", height=100, placeholder= "Exempel: Vilka kompetenser efterfr친gas ofta f칬r projektledare?")
            rag_submit_button = st.form_submit_button("St칛ll RAG-fr친ga")

            if rag_submit_button and rag_query_text:
                if not GEMINI_API_KEY and LLM_FUNCTIONS_IMPORTED:
                    st.error("API-nyckel f칬r Gemini saknas. Kan inte k칬ra den riktiga modellen.")
                else:
                    with st.spinner("Bearbetar din RAG-fr친ga..."):
                        # Anropa din riktiga funktion eller dummy-funktionen
                        answer, context_chunks = query_rag_model(rag_query_text, DB_PATH, GEMINI_API_KEY)

                        st.subheader("Svar fr친n RAG-modellen:")
                        st.markdown(f"> {answer}") # Anv칛nd blockquote f칬r tydlighet

                        if context_chunks:
                            with st.expander("Visa anv칛nd kontext (h칛mtade t칛xtavsnitt)", expanded= False):
                                for i, chunk in enumerate(context_chunks):
                                    st.text_area(f"Avsnitt {i+1}", chunk, height= 100, disabled=True, key = f"rag_chunk_{i}")
                        else:
                            st.info("Ingen specifik kontext hittades f칬r din fr친ga.")
    st.divider()
    st.info("""
    **Observera:** Om LLM-funktionerna intek unde importeras korrekt eller om API-nyckeln saknas,
    anv칛nds exempeldata/simulerade svar. F칬r full funktionalitet, se till att 'llm_core.interaction.py'
    칛r korrekt konfiguerad med dina funktioner och att 'GEMINI_API_KEY' finns i 'secrets.toml'.
    """)

# --- K칬r huvudfunktionen f칬r att bygga sidan ---
build_llm_introduction_and_tools()
